FUNCTION caldate, $
   jdate, $
   year, $
   month, $
   day, $
   HOUR = hour, $
   MINUTE = minute, $
   SECOND = second, $
   DATE = date, $
   DEBUG = debug, $
   EXCPT_COND = excpt_cond

   ;Sec-Doc
   ;  PURPOSE: This function takes a Julian date as input and computes the
   ;  corresponding calendar year, month and day. The date, formatted as a
   ;  YYYY-MM-DD is available in the optional output keyword parameter
   ;  DATE.
   ;
   ;  ALGORITHM: This function is a convenient wrapper to the IDL program
   ;  CALDAT.
   ;
   ;  SYNTAX: rc = caldate(jdate, year, month, day, DATE = date, $
   ;  DEBUG = debug, EXCPT_COND = excpt_cond)
   ;
   ;  POSITIONAL PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   jdate {LONG or DOUBLE} [I]: The Julian date.
   ;
   ;  *   year {INT} [O]: The corresponding calendar year number.
   ;
   ;  *   month {INT} [O]: The corresponding calendar month number.
   ;
   ;  *   day {INT} [O]: The corresponding calendar day number.
   ;
   ;  KEYWORD PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   DATE = date {STRING} [O]: The corresponding date expressed as a
   ;      STRING formatted as yyyy-mm-dd.
   ;
   ;  *   DEBUG = debug {INT} [I] (Default value: 0): Flag to activate (1)
   ;      or skip (0) debugging tests.
   ;
   ;  *   EXCPT_COND = excpt_cond {STRING} [O] (Default value: ”):
   ;      Description of the exception condition if one has been
   ;      encountered, or a null string otherwise.
   ;
   ;  RETURNED VALUE TYPE: INT.
   ;
   ;  OUTCOME:
   ;
   ;  *   If no exception condition has been detected, this function
   ;      returns 0, and the output keyword parameter excpt_cond is set to
   ;      a null string, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided in the call. The output positional parameters contain
   ;      the results generated by this function.
   ;
   ;  *   If an exception condition has been detected, this function
   ;      returns a non-zero error code, and the output keyword parameter
   ;      excpt_cond contains a message about the exception condition
   ;      encountered, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided. The output positional parameters may be undefined (for
   ;      parameters), incomplete or incorrect.
   ;
   ;  EXCEPTION CONDITIONS:
   ;
   ;  *   Error 100: One or more positional parameter(s) are missing.
   ;
   ;  *   Error 110: The input positional parameter jdate must be either a
   ;      LONG or a DOUBLE number.
   ;
   ;  *   Error 120: The input positional parameter jdate must be
   ;      positive.
   ;
   ;  DEPENDENCIES:
   ;
   ;  *   is_double.pro
   ;
   ;  *   is_long.pro
   ;
   ;  *   strstr.pro
   ;
   ;  REMARKS:
   ;
   ;  *   NOTE 1: This function returns the calendar information in the
   ;      order year, month, day, rather than order of the CALDAT program,
   ;      which is month, day, year.
   ;
   ;  *   NOTE 2: The input positional parameter jdate can be a scalar or
   ;      an array.
   ;
   ;  EXAMPLES:
   ;
   ;      IDL> jdate = 2458606L
   ;      IDL> rc = caldate(jdate, year, month, day, DATE = date)
   ;      IDL> PRINT, 'date = ' + date
   ;      date = 2019-05-02
   ;
   ;      IDL> jdate = 2458606.12345D
   ;      IDL> rc = caldate(jdate, year, month, day, DATE = date,
   ;         HOUR = hour, MINUTE = minute, SECOND = second)
   ;      IDL> PRINT, 'date = ' + date
   ;      date = 2019-05-02
   ;      IDL> PRINT, hour, minute, second
   ;                14          57       46.079986
   ;
   ;      IDL> jdate = [2458606, 2458607]
   ;      IDL> rc = caldate(jdate, year, month, day, DATE = date)
   ;      IDL> PRINT, date
   ;      2019-05-02 2019-05-03
   ;
   ;  REFERENCES: None.
   ;
   ;  VERSIONING:
   ;
   ;  *   2014–06–13: Version 1.0 — Initial release by Linda Hunt.
   ;
   ;  *   2019–05–02: Version 2.00 — Systematic update of all routines to
   ;      implement stricter coding standards and improve documentation.
   ;
   ;  *   2019–06–12: Version 2.01 — Update the documentation.
   ;
   ;  *   2019–08–20: Version 2.1.0 — Adopt revised coding and
   ;      documentation standards (in particular regarding the assignment
   ;      of numeric return codes), and switch to 3-parts version
   ;      identifiers.
   ;Sec-Lic
   ;  INTELLECTUAL PROPERTY RIGHTS
   ;
   ;  *   Copyright (C) 2017-2020 Michel M. Verstraete.
   ;
   ;      Permission is hereby granted, free of charge, to any person
   ;      obtaining a copy of this software and associated documentation
   ;      files (the “Software”), to deal in the Software without
   ;      restriction, including without limitation the rights to use,
   ;      copy, modify, merge, publish, distribute, sublicense, and/or
   ;      sell copies of the Software, and to permit persons to whom the
   ;      Software is furnished to do so, subject to the following three
   ;      conditions:
   ;
   ;      1. The above copyright notice and this permission notice shall
   ;      be included in their entirety in all copies or substantial
   ;      portions of the Software.
   ;
   ;      2. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY
   ;      KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
   ;      WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
   ;      AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   ;      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   ;      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   ;      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   ;      OTHER DEALINGS IN THE SOFTWARE.
   ;
   ;      See: https://opensource.org/licenses/MIT.
   ;
   ;      3. The current version of this Software is freely available from
   ;
   ;      https://github.com/mmverstraete.
   ;
   ;  *   Feedback
   ;
   ;      Please send comments and suggestions to the author at
   ;      MMVerstraete@gmail.com
   ;Sec-Cod

   COMPILE_OPT idl2, HIDDEN

   ;  Get the name of this routine:
   info = SCOPE_TRACEBACK(/STRUCTURE)
   rout_name = info[N_ELEMENTS(info) - 1].ROUTINE

   ;  Initialize the default return code:
   return_code = 0

   ;  Set the default values of flags and essential keyword parameters:
   IF (KEYWORD_SET(debug)) THEN debug = 1 ELSE debug = 0
   excpt_cond = ''

   IF (debug) THEN BEGIN

   ;  Return to the calling routine with an error message if one or more
   ;  positional parameters are missing:
      n_reqs = 4
      IF (N_PARAMS() NE n_reqs) THEN BEGIN
         error_code = 100
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': Routine must be called with ' + strstr(n_reqs) + $
            ' positional parameter(s): jdate, year, month, day.'
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'jdate' is not either a LONG or a DOUBLE number:
      IF ((is_long(jdate) NE 1) AND (is_double(jdate) NE 1)) THEN BEGIN
         error_code = 110
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': The input positional parameter jdate must be either a LONG ' + $
            'or a DOUBLE number.'
         RETURN, error_code
      ENDIF

   ;  Return to the calling routine with an error message if the input
   ;  positional parameter 'jdate' is negative:
      IF (jdate LT 0) THEN BEGIN
         error_code = 120
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': The input positional parameter jdate must be positive.'
         RETURN, error_code
      ENDIF
   ENDIF

   ;  Extract the calendar information from the Julian date:
   CALDAT, jdate, month, day, year, hour, minute, second

   ;  Generate the date STRING:
   date = strstr(year) + '-' + $
      STRING(month, FORMAT = '(I02)') + '-' + $
      STRING(day, FORMAT = '(I02)')

   RETURN, return_code

END
