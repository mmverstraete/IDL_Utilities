FUNCTION get_host_info, $
   os_name, $
   comp_name, $
   DEBUG = debug, $
   EXCPT_COND = excpt_cond

   ;Sec-Doc
   ;  PURPOSE: This function reports on the names of the operating system
   ;  and the computer on which it is running.
   ;
   ;  ALGORITHM: This function does not require any input; it relies on
   ;  the IDL !VERSION internal variable and on either the hostname
   ;  command (on computers running under Linux or Mac), or the
   ;  environmental variable COMPUTERNAME (on computers running under
   ;  MS Windows) to define the value of the output positional parameters.
   ;
   ;  SYNTAX: rc = get_host_info(os_name, comp_name, $
   ;  DEBUG = debug, EXCPT_COND = excpt_cond)
   ;
   ;  POSITIONAL PARAMETERS [INPUT/OUTPUT]:
   ;
   ;  *   os_name {STRING} [O]: The name of the underlying operating
   ;      system; under IDL Version 8.7, this output positional parameter
   ;      is either linux, or darwin, or Win32.
   ;
   ;  *   comp_name {STRING} [O]: The name of the computer executing this
   ;      routine.
   ;
   ;  KEYWORD PARAMETERS [INPUT/OUTPUT]: None.
   ;
   ;  RETURNED VALUE TYPE: INT.
   ;
   ;  OUTCOME:
   ;
   ;  *   If no exception condition has been detected, this function
   ;      returns 0, and the output keyword parameter excpt_cond is set to
   ;      a null string, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided in the call. The output positional parameters os_name
   ;      and comp_name contain the results generated by this function.
   ;
   ;  *   If an exception condition has been detected, this function
   ;      returns the warning code 98, and the output keyword parameter
   ;      excpt_cond contains a message about the exception condition
   ;      encountered, if the optional input keyword parameter DEBUG is
   ;      set and if the optional output keyword parameter EXCPT_COND is
   ;      provided. The output positional parameters os_name and comp_name
   ;      may be inexistent, incomplete or incorrect.
   ;
   ;  EXCEPTION CONDITIONS:
   ;
   ;  *   Error 98: The operating system or the computer is not
   ;      recognized.
   ;
   ;  DEPENDENCIES:
   ;
   ;  *   strstr.pro
   ;
   ;  REMARKS:
   ;
   ;  *   NOTE 1: The logic implemented in this function may need to be
   ;      updated either if one of the operating systems changes its
   ;      naming convention, or more or different operating systems should
   ;      be considered, or the mechanism to retrieve the name of the
   ;      computer changes.
   ;
   ;  *   NOTE 2: On computers running under the Microsoft Windows family
   ;      of operating systems, the user should verify that the
   ;      environment variable COMPUTERNAME exists prior to using this
   ;      function.
   ;
   ;  *   NOTE 3: Exception condition 98 does not need to imply a
   ;      processing interruption, as the input and output folders
   ;      normally provided by default on the basis of this host
   ;      information can be overridden explicitly with optional input
   ;      keyword parameters.
   ;
   ;  EXAMPLES:
   ;
   ;      IDL> rc = get_host_info(os_name, comp_name)
   ;      IDL> PRINT, 'os_name = ', os_name
   ;      os_name = darwin
   ;      IDL> PRINT, 'comp_name = ', comp_name
   ;      comp_name = MicMac2
   ;
   ;  REFERENCES: None.
   ;
   ;  VERSIONING:
   ;
   ;  *   2018–07–03: Version 0.9 — Initial release.
   ;
   ;  *   2018–07–05: Version 1.0 — Initial public release.
   ;
   ;  *   2018–07–10: Version 1.1 — Documentation update.
   ;
   ;  *   2019–01–28: Version 2.00 — Systematic update of all routines to
   ;      implement stricter coding standards and improve documentation.
   ;
   ;  *   2019–02–26: Version 2.01 — Minor coding update: Add requirement
   ;      to call this function with 2 output positional parameters.
   ;
   ;  *   2019–08–20: Version 2.1.0 — Adopt revised coding and
   ;      documentation standards (in particular regarding the assignment
   ;      of numeric return codes), and switch to 3-parts version
   ;      identifiers.
   ;Sec-Lic
   ;  INTELLECTUAL PROPERTY RIGHTS
   ;
   ;  *   Copyright (C) 2017-2020 Michel M. Verstraete.
   ;
   ;      Permission is hereby granted, free of charge, to any person
   ;      obtaining a copy of this software and associated documentation
   ;      files (the “Software”), to deal in the Software without
   ;      restriction, including without limitation the rights to use,
   ;      copy, modify, merge, publish, distribute, sublicense, and/or
   ;      sell copies of the Software, and to permit persons to whom the
   ;      Software is furnished to do so, subject to the following three
   ;      conditions:
   ;
   ;      1. The above copyright notice and this permission notice shall
   ;      be included in their entirety in all copies or substantial
   ;      portions of the Software.
   ;
   ;      2. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY
   ;      KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
   ;      WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
   ;      AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
   ;      HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
   ;      WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
   ;      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
   ;      OTHER DEALINGS IN THE SOFTWARE.
   ;
   ;      See: https://opensource.org/licenses/MIT.
   ;
   ;      3. The current version of this Software is freely available from
   ;
   ;      https://github.com/mmverstraete.
   ;
   ;  *   Feedback
   ;
   ;      Please send comments and suggestions to the author at
   ;      MMVerstraete@gmail.com
   ;Sec-Cod

   COMPILE_OPT idl2, HIDDEN

   ;  Get the name of this routine:
   info = SCOPE_TRACEBACK(/STRUCTURE)
   rout_name = info[N_ELEMENTS(info) - 1].ROUTINE

   ;  Initialize the default return code:
   return_code = 0

   ;  Set the default values of flags and essential keyword parameters:
   IF (KEYWORD_SET(debug)) THEN debug = 1 ELSE debug = 0
   excpt_cond = ''

   IF (debug) THEN BEGIN

   ;  Return to the calling routine with an error message if one or more
   ;  positional parameters are missing:
      n_reqs = 2
      IF (N_PARAMS() NE n_reqs) THEN BEGIN
         error_code = 100
         excpt_cond = 'Error ' + strstr(error_code) + ' in ' + rout_name + $
            ': Routine must be called with ' + strstr(n_reqs) + $
            ' positional parameter(s): os_name, comp_name.'
         RETURN, error_code
      ENDIF
   ENDIF

   ;  Initialize the output positional parameter(s):
   os_name = 'Unknown_OS'
   comp_name = 'Unknown_Computer'

   ;  Identify the current operating system:
   os_name = !VERSION.OS

   ;  Identify the computer:
   CASE os_name OF
      'linux': BEGIN
         SPAWN, 'hostname -s', computer
         comp_name = computer[0]
         return_code = 0
         END
      'darwin': BEGIN
         SPAWN, 'hostname -s', computer
         comp_name = computer[0]
         return_code = 0
         END
      'Win32': BEGIN
         comp_name = strstr(GETENV('COMPUTERNAME'))
         return_code = 0
         END
   ENDCASE

   ;  Return to the calling routine with an error message if the operating
   ;  system or the computer is unrecognized:
   IF ((os_name EQ '') OR (comp_name EQ '')) THEN BEGIN
      error_code = 98
      excpt_cond = 'Warning ' + strstr(error_code) + ' in ' + rout_name + $
         ': OS or computer unrecognized.'
      RETURN, error_code
   ENDIF

   RETURN, return_code

END
